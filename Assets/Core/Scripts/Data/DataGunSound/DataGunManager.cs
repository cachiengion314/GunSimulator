using UnityEngine;
using HoangNam;
using System.IO;
using System.Collections.Generic;
using System;


public class DataGunManager : MonoBehaviour
{
    public static DataGunManager Instance { get; private set; }
    public DataGun _dataGun;
    public GunDataJsonBase _GunDataJsonBase;
    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        SetupDataTask();

    }
    public void SetupDataTask()
    {
        if (!File.Exists(SaveSystem.GetSaveDataPathFrom("GunData")))
        {

            ChangeScriptableObjectToJson();
        }
        else
        {
            CheckUpdateDataGunVersion();
            LoadDataJsonTask();
        }
    }
    public void CheckUpdateDataGunVersion() // ki·ªÉm tra d·ªØ li·ªáu c√°c nhi·ªám v·ª• xem c√≥ kh·ªõp v·ªõi d·ªØ l·ª•u trong ScriptableObject
    {

        if (_GunDataJsonBase.ListGunsJson.Count != _dataGun.ListDataGun.Count)
        {
            // N·∫øu s·ªë l∆∞·ª£ng kh√°c nhau ho·∫∑c file JSON kh√¥ng t·ªìn t·∫°i, ch·∫°y l·∫°i ChangeScriptableObjectToJson
            ChangeScriptableObjectToJson();
            return;
        }

        // Duy·ªát t·ª´ng s√∫ng trong ScriptableObject ƒë·ªÉ ki·ªÉm tra s·ª± thay ƒë·ªïi
        for (int i = 0; i < _dataGun.ListDataGun.Count; i++)
        {
            var scriptableGun = _dataGun.ListDataGun[i];

            // üî• T√¨m ki·∫øm theo c·∫£ typeGun v√† idGun
            var jsonGun = _GunDataJsonBase.ListGunsJson.Find(t => t._idGun == scriptableGun._idGun && t._typeGun == (int)scriptableGun._typeGun);

            if (jsonGun == null)
            {
                Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√∫ng (ID: {scriptableGun._idGun}, Type: {scriptableGun._typeGun}) trong JSON. C·∫≠p nh·∫≠t l·∫°i...");
                ChangeScriptableObjectToJson();
                return;
            }

            // Ki·ªÉm tra n·∫øu t√™n s√∫ng, gi√° tr·ªã ƒë·∫°n ho·∫∑c ch·∫ø ƒë·ªô b·∫Øn kh√°c nhau -> C·∫≠p nh·∫≠t l·∫°i JSON
            if (jsonGun._strGun != scriptableGun._strGun ||
                jsonGun._currentStartValue != scriptableGun._currentStartValue ||
                jsonGun._currentValue != scriptableGun._currentValue ||
                !AreFireModesEqual(jsonGun._fireModes, scriptableGun._fireModes))
            {
                Debug.LogWarning($"üîÑ D·ªØ li·ªáu s√∫ng {scriptableGun._strGun} ƒë√£ thay ƒë·ªïi, c·∫≠p nh·∫≠t JSON...");
                ChangeScriptableObjectToJson();
                return;
            }
        }
    }
    // üõ† H√†m h·ªó tr·ª£: Ki·ªÉm tra ch·∫ø ƒë·ªô b·∫Øn gi·ªØa JSON v√† ScriptableObject
    private bool AreFireModesEqual(int[] jsonModes, DataGun.FireMode[] scriptableModes)
    {
        if (jsonModes.Length != scriptableModes.Length) return false;

        for (int i = 0; i < jsonModes.Length; i++)
        {
            if (jsonModes[i] != (int)scriptableModes[i]) return false;
        }
        return true;
    }


    public void ChangeScriptableObjectToJson()
    {
        // T·∫°o m·ªõi _taskDataJsonBase
        _GunDataJsonBase = new GunDataJsonBase();

        // Chuy·ªÉn d·ªØ li·ªáu t·ª´ _taskData sang _taskDataJsonBase
        foreach (var Gun in _dataGun.ListDataGun)
        {
            _GunDataJsonBase.ListGunsJson.Add(new GunDataJsonBase.GunDataClassSave
            {
                _idGun = Gun._idGun,
                _strGun = Gun._strGun,
                _currentStartValue = Gun._currentStartValue,
                _currentValue = Gun._currentValue,
                _fireModes = Array.ConvertAll(Gun._fireModes, mode => (int)mode), // L∆∞u danh s√°ch ch·∫ø ƒë·ªô b·∫Øn
                _typeGun = (int)Gun._typeGun,
                _isOwned = Gun._isOwned,
                _isPick = Gun._isPick,
            });
        }
        // L∆∞u d·ªØ li·ªáu v√†o JSON
        SaveDataJsonTask();
    }

    public void SaveDataJsonTask()
    {
        SaveSystem.SaveWith(_GunDataJsonBase, "GunData");
    }
    void LoadDataJsonTask()
    {
        _GunDataJsonBase = SaveSystem.LoadWith<GunDataJsonBase>("GunData");
    }

    public void UpdateGunCurrenValue(int IdTypeGun, int IdGun, int minusCurrent)
    {
        var gunData = GetGunDataClass(IdTypeGun, IdGun);
        if (gunData != null)
        {
            // Tr·ª´ ƒë·∫°n nh∆∞ng kh√¥ng cho xu·ªëng d∆∞·ªõi 0
            gunData._currentValue -= minusCurrent;
            if (gunData._currentValue < 0)
            {
                gunData._currentValue = 0;
            }
            // L∆∞u l·∫°i d·ªØ li·ªáu
            SaveDataJsonTask();
        }
        else
        {
            Debug.LogError($"Kh√¥ng t√¨m th·∫•y s√∫ng v·ªõi IdGun: {IdGun} v√† IdTypeGun: {IdTypeGun}");
        }

    }
    public void ResetDataTest(int IdTypeGun, int IdGun)
    {
        var GunData = GetGunDataClass(IdTypeGun, IdGun);
        GunData._currentValue = GunData._currentStartValue;
        SaveDataJsonTask();
    }
    public GunDataJsonBase.GunDataClassSave GetGunDataClass(int IdTypeGun, int IdGun) // l·∫•y ra data c·ªßa gun ƒë√≥ (chi·ªÅu v√†o d·∫°ng sung , chi·ªÅu ti·∫øp id s√∫ng)
    {
        var GunData = _GunDataJsonBase.ListGunsJson.Find(t => t._typeGun == IdTypeGun && t._idGun == IdGun);
        return GunData;
    }
    public GunDataJsonBase.GunDataClassSave GetGunDataClassPick() // l·∫•y ra data c·ªßa gun ƒë√≥ (chi·ªÅu v√†o d·∫°ng sung , chi·ªÅu ti·∫øp id s√∫ng)
    {
        var pickedGun = _GunDataJsonBase.ListGunsJson.Find(gun => gun._isPick == true);

        if (pickedGun != null)
        {
            return pickedGun;
        }
        else
        {
            Debug.LogWarning("Kh√¥ng t√¨m th·∫•y s√∫ng n√†o ƒëang ƒë∆∞·ª£c ch·ªçn!");
            return null; // N·∫øu kh√¥ng c√≥ s√∫ng n√†o ƒë∆∞·ª£c ch·ªçn
        }
    }
    public void ResetIsPickData()
    {
        foreach (var pickedGun in _GunDataJsonBase.ListGunsJson)
        {
            pickedGun._isPick = false;
        }
        SaveDataJsonTask();
    }
    public GunDataJsonBase.GunDataClassSave SelectGun(int typeGun, int idGun)
    {
        // Reset t·∫•t c·∫£ s√∫ng tr∆∞·ªõc khi ch·ªçn m·ªõi
        ResetIsPickData();
        // T√¨m s√∫ng theo type v√† id
        var selectedGun = _GunDataJsonBase.ListGunsJson.Find(gun => gun._typeGun == typeGun && gun._idGun == idGun);

        selectedGun._isPick = true;
        SaveDataJsonTask();
        Debug.Log($"‚úÖ S√∫ng {selectedGun._strGun} (ID: {idGun}, Type: {typeGun}) ƒë√£ ƒë∆∞·ª£c ch·ªçn.");
        return selectedGun;
    }

    public void BuyGun(int typeGun, int idGun)
    {
        if (_GunDataJsonBase == null || _GunDataJsonBase.ListGunsJson == null)
        {
            Debug.LogError("‚ùå _GunDataJsonBase ho·∫∑c ListGunsJson ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
            return;
        }

        var gunToBuy = _GunDataJsonBase.ListGunsJson.Find(gun => gun._typeGun == typeGun && gun._idGun == idGun);

        if (gunToBuy != null)
        {
            if (gunToBuy._isOwned)
            {
                Debug.LogWarning($"‚ö†Ô∏è S√∫ng {gunToBuy._strGun} ƒë√£ ƒë∆∞·ª£c mua tr∆∞·ªõc ƒë√≥.");
                return;
            }

            gunToBuy._isOwned = true;
            SaveDataJsonTask();
            Debug.Log($"‚úÖ ƒê√£ mua s√∫ng {gunToBuy._strGun} (ID: {idGun}, Type: {typeGun}).");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s√∫ng v·ªõi ID {idGun} v√† Type {typeGun}.");
        }
    }


    [System.Serializable]
    public class GunDataJsonBase
    {
        public List<GunDataClassSave> ListGunsJson = new List<GunDataClassSave>();

        [Serializable]
        public class GunDataClassSave
        {
            public int _idGun;// ID c·ªßa Item
            public string _strGun; // T√™n Item
            public int _currentStartValue;   // Gi√° tr·ªã hi·ªán t·∫°i
            public int _currentValue;   // Gi√° tr·ªã hi·ªán t·∫°i

            public int _typeGun; // d·∫°ng s√∫ng 
            public int[] _fireModes; // Ch·∫ø ƒë·ªô b·∫Øn (danh s√°ch ki·ªÉu s·ªë nguy√™n)
            public bool _isOwned; // s·ªü h·ªØu
            public bool _isPick; // s√∫ng ƒëang ƒë∆∞·ª£c ch·ªçn
        }
    }



}
