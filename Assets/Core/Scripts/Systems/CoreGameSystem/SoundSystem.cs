using UnityEngine;
using Lofelt.NiceVibrations;
using UnityEngine.SceneManagement;
using HoangNam;
using System;

/// <summary> Fix haptic issue when build in IOS
/// https://github.com/asmadsen/react-native-unity-view/issues/35
/// </summary>
[RequireComponent(typeof(AudioSource))]
public class SoundSystem : MonoBehaviour
{
  public static SoundSystem Instance { get; private set; }

  [Header("Injected Dependencies")]
  [SerializeField] AudioClip mainThemeHome;
  [SerializeField] AudioClip mainThemeIngame;
  // 1.0
  [Header("---SFX---")]
  [SerializeField] AudioClip cannotTouchBoxSfx;
  [SerializeField] AudioClip _clickButtom;
  [SerializeField] AudioClip _hidePopup;
  [SerializeField] AudioClip _colectionTray;
  [SerializeField] AudioClip _dropTray;
  [SerializeField] AudioClip _trayComplete;
  [SerializeField] AudioClip _trayMovement;
  [SerializeField] AudioClip _dropCup;
  [SerializeField] AudioClip _levelComplete;
  [SerializeField] AudioClip _levelFail;
  [SerializeField] AudioClip pistolFireSfx;
  [SerializeField] AudioClip gunReload;
  [System.Serializable]
  public struct GunAudioClips
  {
    public int idTypeGun;         // ID lo·∫°i s√∫ng

    public AudioClip[] audioClips;// Danh s√°ch √¢m thanh c·ªßa lo·∫°i s√∫ng ƒë√≥
  }
  [Header("---ListPistolFireSfx---")] //Type theo id type DatdGunManager
  public GunAudioClips[] gunAudioClipsArray;
  private void OnValidate()
  {
    for (int i = 0; i < gunAudioClipsArray.Length; i++)
    {
      gunAudioClipsArray[i].idTypeGun = i; // G√°n ID theo index t·ª± ƒë·ªông
    }
  }


  [Header("Components")]
  [SerializeField] AudioSource audioSource;
  private void Awake()
  {
    if (Instance == null)
      Instance = this;
    else Destroy(gameObject);
  }

  private void Start()
  {
    SceneManager.sceneLoaded += ScreenLoaded;
  }

  private void OnDestroy()
  {
    SceneManager.sceneLoaded -= ScreenLoaded;
  }

  void ScreenLoaded(Scene scene, LoadSceneMode mode)
  {
    if (GameSystem.Instance.IsMusicOn)
    {
      PlayMainThemeSfx();
    }
    else
    {
      StopMainThemeSfx();
    }
  }
  public void PlayHapticWith(HapticPatterns.PresetType presetType)
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(presetType);
    }
  }

  public void PlayButtonSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Success);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_clickButtom, Vector3.forward * -9, 1);
  }

  public void PlayHidePopupSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.LightImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_hidePopup, Vector3.forward * -9, 1);
  }

  public void PlayColectionTraySfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Success);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_colectionTray, Vector3.forward * -9, 1);
  }

  public void PlayDropTraySfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.LightImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_dropTray, Vector3.forward * -9, 1);
  }

  public void PlayBoxCompleteSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Selection);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_trayComplete, Vector3.forward * -9, 1);
  }

  public void PlayBoxMovementSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.SoftImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_trayMovement, Vector3.forward * -9, 1f);
  }

  public void PlayLevelCompleteSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Success);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_levelComplete, Vector3.forward * -9, 1);
  }

  // 1.0
  public void PlayLevelFailSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Warning);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_levelFail, Vector3.forward * -9, 1);
  }

  public void PlayDropCupSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.LightImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(_dropCup, Vector3.forward * -9, 1f);
  }

  public void PlayCannotTouchCupSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.Failure);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(cannotTouchBoxSfx, Vector3.forward * -9, 1f);
  }


  public void PlayMainThemeSfx()
  {
    if (SceneManager.GetActiveScene().name.Equals(KeyStr.NAME_SCENE_LOBBY))
    {
      PlayMainThemeSfx(mainThemeHome);
    }
    else
    {
      PlayMainThemeSfx(mainThemeIngame);
    }
  }

  public void PlayMainThemeSfx(AudioClip audioClip)
  {
    audioSource.volume = 0.3f;
    audioSource.clip = audioClip;
    audioSource.loop = true;
    audioSource.Play();
  }

  public void StopMainThemeSfx()
  {
    audioSource.Stop();
  }

  public void PlayPistolSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.LightImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(pistolFireSfx, Vector3.forward * -9, 1);
  }
  public void PlayGunSoundSfx(int idType, int idGun)
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(GetTypeHaptic(idType));
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioClip _audioClipTarget = GetGunSound(idType, idGun);
    if (_audioClipTarget == null) return;
    // auidoFireTypeSingle.PlayOneShot(_audioClipTarget);
    AudioSource.PlayClipAtPoint(_audioClipTarget, Vector3.forward * -9, 1);
  }
  public AudioClip GetGunSound(int idType, int idGun)
  {
    foreach (var gunAudio in gunAudioClipsArray)
    {
      if (gunAudio.idTypeGun == idType)
      {
        if (idGun >= 0 && idGun < gunAudio.audioClips.Length)
        {
          return gunAudio.audioClips[idGun];
        }
        else
        {
          Debug.LogError($"‚ùå idGun {idGun} v∆∞·ª£t qu√° danh s√°ch √¢m thanh lo·∫°i {idType}");
          return null;
        }
      }
    }
    Debug.LogError($"‚ùå Kh√¥ng t√¨m th·∫•y √¢m thanh cho lo·∫°i s√∫ng {idType}");
    return null;
  }

  HapticPatterns.PresetType GetTypeHaptic(int idType)
  {
    switch (idType)
    {
      case 0: return HapticPatterns.PresetType.LightImpact;  // üîπ Nh·∫π, rung ng·∫Øn, ph√π h·ª£p v·ªõi b·∫Øn l·∫ª, ch·∫°m nh·∫π UI
      case 1: return HapticPatterns.PresetType.MediumImpact; // üî∏ Trung b√¨nh, rung v·ª´a, ph√π h·ª£p v·ªõi b·∫Øn li√™n thanh nh·∫π
      case 2: return HapticPatterns.PresetType.HeavyImpact;  // üî¥ M·∫°nh, rung d√†i h∆°n, ph√π h·ª£p v·ªõi s√∫ng h·∫°ng n·∫∑ng (Shotgun, Sniper)
      case 3: return HapticPatterns.PresetType.MediumImpact;      // ‚úÖ Nh·∫π nh√†ng, d√†nh cho th√¥ng b√°o th√†nh c√¥ng (reload xong, headshot)
      case 4: return HapticPatterns.PresetType.HeavyImpact;      // ‚ö†Ô∏è C·∫£nh b√°o, rung d√†i h∆°n b√¨nh th∆∞·ªùng, ph√π h·ª£p khi s·∫Øp h·∫øt ƒë·∫°n
      case 5: return HapticPatterns.PresetType.HeavyImpact;      // ‚ùå C·∫£nh b√°o m·∫°nh, d√†nh cho l·ªói (h·∫øt ƒë·∫°n, s√∫ng k·∫πt)
      default:
        Debug.LogWarning($"‚ö†Ô∏è idType {idType} kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng LightImpact");
        return HapticPatterns.PresetType.LightImpact;
    }
  }
  public void GunReloadSfx()
  {
    if (GameSystem.Instance.IsHapticOn)
    {
      HapticPatterns.PlayPreset(HapticPatterns.PresetType.LightImpact);
    }
    if (!GameSystem.Instance.IsSoundOn) return;
    AudioSource.PlayClipAtPoint(gunReload, Vector3.forward * -9, 1f);
  }


}
